{"numFailedTestSuites":31,"numFailedTests":0,"numPassedTestSuites":1,"numPassedTests":5,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":31,"numTodoTests":0,"numTotalTestSuites":32,"numTotalTests":5,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1746647735090,"success":false,"testResults":[{"assertionResults":[],"coverage":{},"endTime":1746647738074,"message":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\tests\\theme.test.js:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { applyTheme, loadTheme, listenForThemeChange } from '../utils/theme';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      \u001b[2mat Runtime.createScriptFromCode (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\n","name":"C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\tests\\theme.test.js","startTime":1746647738074,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1746647738074,"message":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\tests\\setupWindow.test.js:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { setupWindowOnload } from '../utils/setupWindow';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      \u001b[2mat Runtime.createScriptFromCode (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\n","name":"C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\tests\\setupWindow.test.js","startTime":1746647738074,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1746647738074,"message":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\tests\\toggleTabVisibility.test.js:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { toggleTabVisibility } from '../utils/toggleTabVisibility';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      \u001b[2mat Runtime.createScriptFromCode (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\n","name":"C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\tests\\toggleTabVisibility.test.js","startTime":1746647738074,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1746647738074,"message":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\tests\\showNotification.test.js:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { showNotification } from '../utils/showNotification';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      \u001b[2mat Runtime.createScriptFromCode (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\n","name":"C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\tests\\showNotification.test.js","startTime":1746647738074,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1746647738074,"message":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\libs\\zwiftmap-main\\backend\\src\\shared\\browser\\roads\\roads\\Roads.spec.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { describe, expect, it } from \"vitest\";\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      \u001b[2mat Runtime.createScriptFromCode (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\n","name":"C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\libs\\zwiftmap-main\\backend\\src\\shared\\browser\\roads\\roads\\Roads.spec.ts","startTime":1746647738074,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1746647738074,"message":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\tests\\showFitData.test.js:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { showFitData } from '../utils/showFitData';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      \u001b[2mat Runtime.createScriptFromCode (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\n","name":"C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\tests\\showFitData.test.js","startTime":1746647738074,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1746647738074,"message":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\tests\\updateMapTheme.test.js:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { updateMapTheme } from '../utils/updateMapTheme';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      \u001b[2mat Runtime.createScriptFromCode (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\n","name":"C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\tests\\updateMapTheme.test.js","startTime":1746647738074,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["recentFiles"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"recentFiles should save and load recent files","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should save and load recent files"},{"ancestorTitles":["recentFiles"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"recentFiles should add a recent file and move it to the top","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should add a recent file and move it to the top"},{"ancestorTitles":["recentFiles"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"recentFiles should not exceed max recent files","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should not exceed max recent files"},{"ancestorTitles":["recentFiles"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"recentFiles should get short recent name","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should get short recent name"},{"ancestorTitles":["recentFiles"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"recentFiles should return empty array if file does not exist","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return empty array if file does not exist"}],"endTime":1746647736211,"message":"","name":"C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\tests\\recentFiles.test.js","startTime":1746647735389,"status":"passed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1746647738074,"message":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\libs\\zwiftmap-main\\frontend\\src\\util\\sections.spec.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import identity from \"lodash-es/identity\";\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      \u001b[2mat Runtime.createScriptFromCode (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\n","name":"C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\libs\\zwiftmap-main\\frontend\\src\\util\\sections.spec.ts","startTime":1746647738074,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1746647738074,"message":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\tests\\setupTabButton.test.js:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { setupTabButton } from '../utils/setupTabButton';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      \u001b[2mat Runtime.createScriptFromCode (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\n","name":"C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\tests\\setupTabButton.test.js","startTime":1746647738074,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1746647738074,"message":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\tests\\removeExitFullscreenOverlay.test.js:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { removeExitFullscreenOverlay } from '../utils/removeExitFullscreenOverlay';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      \u001b[2mat Runtime.createScriptFromCode (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\n","name":"C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\tests\\removeExitFullscreenOverlay.test.js","startTime":1746647738074,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1746647738074,"message":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\tests\\rendererUtils.test.js:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { showNotification, setLoading } from '../utils/rendererUtils';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      \u001b[2mat Runtime.createScriptFromCode (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\n","name":"C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\tests\\rendererUtils.test.js","startTime":1746647738074,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1746647738074,"message":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\libs\\zwiftmap-main\\frontend\\src\\constants\\worldConfigs\\index.spec.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { describe, expect, it } from \"vitest\";\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      \u001b[2mat Runtime.createScriptFromCode (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\n","name":"C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\libs\\zwiftmap-main\\frontend\\src\\constants\\worldConfigs\\index.spec.ts","startTime":1746647738074,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1746647738074,"message":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\libs\\zwiftmap-main\\frontend\\src\\services\\gpx.spec.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { createGPX } from \"./gpx\";\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      \u001b[2mat Runtime.createScriptFromCode (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\n","name":"C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\libs\\zwiftmap-main\\frontend\\src\\services\\gpx.spec.ts","startTime":1746647738074,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1746647738074,"message":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\tests\\mapMeasureTool.test.js:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { addSimpleMeasureTool } from '../utils/mapMeasureTool';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      \u001b[2mat Runtime.createScriptFromCode (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\n","name":"C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\tests\\mapMeasureTool.test.js","startTime":1746647738074,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1746647738074,"message":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\tests\\renderSummary.test.js:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { renderSummary } from '../utils/renderSummary';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      \u001b[2mat Runtime.createScriptFromCode (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\n","name":"C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\tests\\renderSummary.test.js","startTime":1746647738074,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1746647738074,"message":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\tests\\renderSummaryHelpers.test.js:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { getStorageKey, saveColPrefs, loadColPrefs, getRowLabel } from '../utils/renderSummaryHelpers.js';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      \u001b[2mat Runtime.createScriptFromCode (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\n","name":"C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\tests\\renderSummaryHelpers.test.js","startTime":1746647738074,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1746647738074,"message":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\tests\\renderChart.test.js:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { renderChart } from '../utils/renderChart';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      \u001b[2mat Runtime.createScriptFromCode (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\n","name":"C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\tests\\renderChart.test.js","startTime":1746647738074,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1746647738074,"message":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\tests\\showUpdateNotification.test.js:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { showUpdateNotification } from '../utils/showUpdateNotification';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      \u001b[2mat Runtime.createScriptFromCode (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\n","name":"C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\tests\\showUpdateNotification.test.js","startTime":1746647738074,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1746647738074,"message":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\tests\\renderTable.test.js:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { renderTable } from '../utils/renderTable';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      \u001b[2mat Runtime.createScriptFromCode (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\n","name":"C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\tests\\renderTable.test.js","startTime":1746647738074,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1746647738074,"message":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\tests\\patchSummaryFields.test.js:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { patchSummaryFields } from '../utils/patchSummaryFields';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      \u001b[2mat Runtime.createScriptFromCode (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\n","name":"C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\tests\\patchSummaryFields.test.js","startTime":1746647738074,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1746647738074,"message":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\tests\\getActiveTabContent.test.js:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { getActiveTabContent } from '../utils/getActiveTabContent';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      \u001b[2mat Runtime.createScriptFromCode (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\n","name":"C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\tests\\getActiveTabContent.test.js","startTime":1746647738074,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1746647738074,"message":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\tests\\setupTheme.test.js:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { setupTheme } from '../utils/setupTheme';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      \u001b[2mat Runtime.createScriptFromCode (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\n","name":"C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\tests\\setupTheme.test.js","startTime":1746647738074,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1746647738074,"message":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\tests\\renderMap.test.js:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { renderMap } from '../utils/renderMap';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      \u001b[2mat Runtime.createScriptFromCode (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\n","name":"C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\tests\\renderMap.test.js","startTime":1746647738074,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1746647738074,"message":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\tests\\setActiveTab.test.js:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { setActiveTab } from '../utils/setActiveTab';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      \u001b[2mat Runtime.createScriptFromCode (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\n","name":"C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\tests\\setActiveTab.test.js","startTime":1746647738074,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1746647738074,"message":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\tests\\arrayBufferToBase64.test.js:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { arrayBufferToBase64 } from '../utils/arrayBufferToBase64';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      \u001b[2mat Runtime.createScriptFromCode (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\n","name":"C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\tests\\arrayBufferToBase64.test.js","startTime":1746647738074,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1746647738074,"message":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\tests\\addFullScreenButton.test.js:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { addFullScreenButton, setupFullscreenListeners, setupDOMContentLoaded } from '../utils/addFullScreenButton';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      \u001b[2mat Runtime.createScriptFromCode (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\n","name":"C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\tests\\addFullScreenButton.test.js","startTime":1746647738074,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1746647738074,"message":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\tests\\aboutModal.test.js:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { vi, describe, it, expect, beforeEach, afterEach } from 'vitest';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      \u001b[2mat Runtime.createScriptFromCode (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\n","name":"C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\tests\\aboutModal.test.js","startTime":1746647738074,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1746647738074,"message":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\tests\\addExitFullscreenOverlay.test.js:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { addExitFullscreenOverlay } from '../utils/addExitFullscreenOverlay';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      \u001b[2mat Runtime.createScriptFromCode (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\n","name":"C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\tests\\addExitFullscreenOverlay.test.js","startTime":1746647738074,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1746647738074,"message":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    SyntaxError: C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\libs\\zwiftmap-main\\frontend\\src\\services\\location-state\\getLocationStateFromUrl.spec.ts: Missing semicolon. (58:7)\n\n    \u001b[0m \u001b[90m 56 |\u001b[39m         \u001b[32m\"/london/london-classique\"\u001b[39m\u001b[33m,\u001b[39m\n     \u001b[90m 57 |\u001b[39m         \u001b[32m\"\"\u001b[39m\u001b[33m,\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 58 |\u001b[39m       ) \u001b[36mas\u001b[39m \u001b[33mLocationStateRoute\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m        \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 59 |\u001b[39m       expect(r1\u001b[33m.\u001b[39mtype)\u001b[33m.\u001b[39mtoBe(\u001b[32m\"route\"\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 60 |\u001b[39m       expect(r1\u001b[33m.\u001b[39mworld)\u001b[33m.\u001b[39mtoBe(\u001b[33mLONDON\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 61 |\u001b[39m       expect(r1\u001b[33m.\u001b[39mroute)\u001b[33m.\u001b[39mtoBe(\u001b[33mLONDON_CLASSIQUE\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\n\n      \u001b[2mat reasonCode (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parse-error.ts\u001b[2m:90:35)\u001b[22m\n      \u001b[2mat Parser.raise (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/tokenizer/index.ts\u001b[2m:1501:31)\u001b[22m\n      \u001b[2mat Parser.semicolon (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/util.ts\u001b[2m:148:45)\u001b[22m\n      \u001b[2mat Parser.parseVarStatement (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/statement.ts\u001b[2m:1221:14)\u001b[22m\n      \u001b[2mat Parser.parseStatementContent (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/statement.ts\u001b[2m:572:69)\u001b[22m\n      \u001b[2mat Parser.match [as parseStatementLike] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/statement.ts\u001b[2m:446:14)\u001b[22m\n      \u001b[2mat Parser.parseStatementLike [as parseStatementListItem] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/statement.ts\u001b[2m:386:17)\u001b[22m\n      \u001b[2mat Parser.parseBlockOrModuleBlockBody (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/statement.ts\u001b[2m:1412:13)\u001b[22m\n      \u001b[2mat Parser.parseBlockBody (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/statement.ts\u001b[2m:1385:5)\u001b[22m\n      \u001b[2mat Parser.expect [as parseBlock] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/statement.ts\u001b[2m:1352:10)\u001b[22m\n      \u001b[2mat Parser.prodParam [as parseFunctionBody] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:2576:12)\u001b[22m\n      \u001b[2mat Parser.trailingCommaLoc [as parseArrowExpression] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:2517:53)\u001b[22m\n      \u001b[2mat Parser.expressionScope [as parseParenAndDistinguishExpression] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1805:12)\u001b[22m\n      \u001b[2mat Parser.canBeArrow [as parseExprAtom] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1145:15)\u001b[22m\n      \u001b[2mat Parser.potentialArrowAt [as parseExprSubscripts] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:722:11)\u001b[22m\n      \u001b[2mat Parser.parseUpdate (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:698:7)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnary (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:660:9)\u001b[22m\n      \u001b[2mat Parser.refExpressionErrors [as parseMaybeUnaryOrPrivate] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:394:5)\u001b[22m\n      \u001b[2mat Parser.potentialArrowAt [as parseExprOps] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:409:11)\u001b[22m\n      \u001b[2mat Parser.potentialArrowAt [as parseMaybeConditional] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:364:11)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssign (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:292:54)\u001b[22m\n      \u001b[2mat refExpressionErrors (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:248:5)\u001b[22m\n      \u001b[2mat Parser.allowInAnd (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:3130:7)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssignAllowIn (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:246:3)\u001b[22m\n      \u001b[2mat Parser.elt [as parseExprListItem] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:2740:7)\u001b[22m\n      \u001b[2mat Parser.addTrailingCommaExtraToNode [as parseCallExpressionArguments] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1017:18)\u001b[22m\n      \u001b[2mat Parser.parseCoverCallAndAsyncArrowHead (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:901:24)\u001b[22m\n      \u001b[2mat Parser.optional [as parseSubscript] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:780:35)\u001b[22m\n      \u001b[2mat Parser.maybeAsyncArrow (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:740:7)\u001b[22m\n      \u001b[2mat Parser.shouldExitDescending [as parseExprSubscripts] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:725:14)\u001b[22m\n      \u001b[2mat Parser.parseUpdate (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:698:7)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnary (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:660:9)\u001b[22m\n      \u001b[2mat Parser.refExpressionErrors [as parseMaybeUnaryOrPrivate] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:394:5)\u001b[22m\n      \u001b[2mat Parser.potentialArrowAt [as parseExprOps] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:409:11)\u001b[22m\n      \u001b[2mat Parser.potentialArrowAt [as parseMaybeConditional] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:364:11)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssign (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:292:54)\u001b[22m\n      \u001b[2mat Parser.refExpressionErrors (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:218:5)\u001b[22m\n      \u001b[2mat parseExpressionBase (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:209:14)\u001b[22m\n      \u001b[2mat Parser.flags [as allowInAnd] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:3127:50)\u001b[22m\n      \u001b[2mat Parser.parseExpression (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:208:33)\u001b[22m\n      \u001b[2mat Parser.allowFunctionDeclaration [as parseStatementContent] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/statement.ts\u001b[2m:642:34)\u001b[22m\n      \u001b[2mat Parser.match [as parseStatementLike] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/statement.ts\u001b[2m:446:14)\u001b[22m\n      \u001b[2mat Parser.parseStatementLike [as parseStatementListItem] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/statement.ts\u001b[2m:386:17)\u001b[22m\n      \u001b[2mat Parser.parseBlockOrModuleBlockBody (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/statement.ts\u001b[2m:1412:13)\u001b[22m\n      \u001b[2mat Parser.parseBlockBody (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/statement.ts\u001b[2m:1385:5)\u001b[22m\n      \u001b[2mat Parser.expect [as parseBlock] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/statement.ts\u001b[2m:1352:10)\u001b[22m\n      \u001b[2mat Parser.prodParam [as parseFunctionBody] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:2576:12)\u001b[22m\n      \u001b[2mat Parser.trailingCommaLoc [as parseArrowExpression] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:2517:53)\u001b[22m\n      \u001b[2mat Parser.expressionScope [as parseParenAndDistinguishExpression] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1805:12)\u001b[22m\n      \u001b[2mat Parser.canBeArrow [as parseExprAtom] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1145:15)\u001b[22m\n      \u001b[2mat Parser.potentialArrowAt [as parseExprSubscripts] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:722:11)\u001b[22m\n      \u001b[2mat Parser.parseUpdate (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:698:7)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnary (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:660:9)\u001b[22m\n      \u001b[2mat Parser.refExpressionErrors [as parseMaybeUnaryOrPrivate] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:394:5)\u001b[22m\n      \u001b[2mat Parser.potentialArrowAt [as parseExprOps] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:409:11)\u001b[22m\n      \u001b[2mat Parser.potentialArrowAt [as parseMaybeConditional] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:364:11)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssign (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:292:54)\u001b[22m\n      \u001b[2mat refExpressionErrors (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:248:5)\u001b[22m\n      \u001b[2mat Parser.allowInAnd (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:3130:7)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssignAllowIn (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:246:3)\u001b[22m\n      \u001b[2mat Parser.elt [as parseExprListItem] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:2740:7)\u001b[22m\n      \u001b[2mat Parser.addTrailingCommaExtraToNode [as parseCallExpressionArguments] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1017:18)\u001b[22m\n      \u001b[2mat Parser.parseCoverCallAndAsyncArrowHead (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:901:24)\u001b[22m\n      \u001b[2mat Parser.optional [as parseSubscript] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:780:35)\u001b[22m\n      \u001b[2mat Parser.maybeAsyncArrow (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:740:7)\u001b[22m\n      \u001b[2mat Parser.shouldExitDescending [as parseExprSubscripts] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:725:14)\u001b[22m\n      \u001b[2mat Parser.parseUpdate (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:698:7)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnary (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:660:9)\u001b[22m\n      \u001b[2mat Parser.refExpressionErrors [as parseMaybeUnaryOrPrivate] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:394:5)\u001b[22m\n      \u001b[2mat Parser.potentialArrowAt [as parseExprOps] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:409:11)\u001b[22m\n      \u001b[2mat Parser.potentialArrowAt [as parseMaybeConditional] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:364:11)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssign (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:292:54)\u001b[22m\n      \u001b[2mat Parser.refExpressionErrors (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:218:5)\u001b[22m\n      \u001b[2mat parseExpressionBase (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:209:14)\u001b[22m\n      \u001b[2mat Parser.flags [as allowInAnd] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:3127:50)\u001b[22m\n      \u001b[2mat Parser.parseExpression (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:208:33)\u001b[22m\n      \u001b[2mat Parser.allowFunctionDeclaration [as parseStatementContent] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/statement.ts\u001b[2m:642:34)\u001b[22m\n      \u001b[2mat Parser.match [as parseStatementLike] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/statement.ts\u001b[2m:446:14)\u001b[22m\n      \u001b[2mat Parser.parseStatementLike [as parseStatementListItem] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/statement.ts\u001b[2m:386:17)\u001b[22m\n      \u001b[2mat Parser.parseBlockOrModuleBlockBody (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/statement.ts\u001b[2m:1412:13)\u001b[22m\n      \u001b[2mat Parser.parseBlockBody (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/statement.ts\u001b[2m:1385:5)\u001b[22m\n      \u001b[2mat Parser.expect [as parseBlock] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/statement.ts\u001b[2m:1352:10)\u001b[22m\n      \u001b[2mat Parser.prodParam [as parseFunctionBody] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:2576:12)\u001b[22m\n      \u001b[2mat Parser.trailingCommaLoc [as parseArrowExpression] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:2517:53)\u001b[22m\n      \u001b[2mat Parser.expressionScope [as parseParenAndDistinguishExpression] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1805:12)\u001b[22m\n      \u001b[2mat Parser.canBeArrow [as parseExprAtom] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1145:15)\u001b[22m\n      \u001b[2mat Parser.potentialArrowAt [as parseExprSubscripts] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:722:11)\u001b[22m\n      \u001b[2mat Parser.parseUpdate (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:698:7)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnary (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:660:9)\u001b[22m\n      \u001b[2mat Parser.refExpressionErrors [as parseMaybeUnaryOrPrivate] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:394:5)\u001b[22m\n      \u001b[2mat Parser.potentialArrowAt [as parseExprOps] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:409:11)\u001b[22m\n      \u001b[2mat Parser.potentialArrowAt [as parseMaybeConditional] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:364:11)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssign (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:292:54)\u001b[22m\n      \u001b[2mat refExpressionErrors (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:248:5)\u001b[22m\n      \u001b[2mat Parser.allowInAnd (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:3130:7)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssignAllowIn (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:246:3)\u001b[22m\n      \u001b[2mat Parser.elt [as parseExprListItem] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:2740:7)\u001b[22m\n      \u001b[2mat Parser.addTrailingCommaExtraToNode [as parseCallExpressionArguments] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1017:18)\u001b[22m\n      \u001b[2mat Parser.parseCoverCallAndAsyncArrowHead (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:901:24)\u001b[22m\n      \u001b[2mat Parser.optional [as parseSubscript] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:780:35)\u001b[22m\n","name":"C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\libs\\zwiftmap-main\\frontend\\src\\services\\location-state\\getLocationStateFromUrl.spec.ts","startTime":1746647738074,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1746647738074,"message":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    SyntaxError: C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\libs\\zwiftmap-main\\frontend\\src\\services\\location-state\\createUrl.spec.ts: Missing semicolon. (5:59)\n\n    \u001b[0m \u001b[90m 3 |\u001b[39m \u001b[36mimport\u001b[39m { createUrl } \u001b[36mfrom\u001b[39m \u001b[32m\"./createUrl\"\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 4 |\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 5 |\u001b[39m \u001b[36mconst\u001b[39m worldLondon \u001b[33m=\u001b[39m worlds\u001b[33m.\u001b[39mfind((w) \u001b[33m=>\u001b[39m w\u001b[33m.\u001b[39mslug \u001b[33m===\u001b[39m \u001b[32m\"london\"\u001b[39m)\u001b[33m!\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m   |\u001b[39m                                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 6 |\u001b[39m \u001b[36mconst\u001b[39m routeLondonLoop \u001b[33m=\u001b[39m routes\u001b[33m.\u001b[39mfind((r) \u001b[33m=>\u001b[39m r\u001b[33m.\u001b[39mslug \u001b[33m===\u001b[39m \u001b[32m\"london-loop\"\u001b[39m)\u001b[33m!\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 7 |\u001b[39m\n     \u001b[90m 8 |\u001b[39m it(\u001b[32m\"default\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\n\n      \u001b[2mat reasonCode (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parse-error.ts\u001b[2m:90:35)\u001b[22m\n      \u001b[2mat Parser.raise (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/tokenizer/index.ts\u001b[2m:1501:31)\u001b[22m\n      \u001b[2mat Parser.semicolon (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/util.ts\u001b[2m:148:45)\u001b[22m\n      \u001b[2mat Parser.parseVarStatement (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/statement.ts\u001b[2m:1221:14)\u001b[22m\n      \u001b[2mat Parser.parseStatementContent (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/statement.ts\u001b[2m:572:69)\u001b[22m\n      \u001b[2mat Parser.match [as parseStatementLike] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/statement.ts\u001b[2m:446:14)\u001b[22m\n      \u001b[2mat Parser.parseModuleItem (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/statement.ts\u001b[2m:377:27)\u001b[22m\n      \u001b[2mat Parser.parsedNonDirective [as parseBlockOrModuleBlockBody] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/statement.ts\u001b[2m:1410:9)\u001b[22m\n      \u001b[2mat Parser.parseBlockBody (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/statement.ts\u001b[2m:1385:5)\u001b[22m\n      \u001b[2mat Parser.sourceType [as parseProgram] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/statement.ts\u001b[2m:223:26)\u001b[22m\n      \u001b[2mat Parser.ExpressionParser [as parseTopLevel] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/statement.ts\u001b[2m:190:55)\u001b[22m\n      \u001b[2mat Parser.program [as parse] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/index.ts\u001b[2m:90:11)\u001b[22m\n      \u001b[2mat _unused2 (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/index.ts\u001b[2m:87:9)\u001b[22m\n      \u001b[2mat parser (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/core/src/parser/index.ts\u001b[2m:28:19)\u001b[22m\n          at parser.next (<anonymous>)\n      \u001b[2mat normalizeFile (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/core/src/transformation/normalize-file.ts\u001b[2m:49:24)\u001b[22m\n          at normalizeFile.next (<anonymous>)\n      \u001b[2mat run (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/core/src/transformation/index.ts\u001b[2m:40:36)\u001b[22m\n          at run.next (<anonymous>)\n      \u001b[2mat transform (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/core/src/transform.ts\u001b[2m:29:20)\u001b[22m\n          at transform.next (<anonymous>)\n      \u001b[2mat evaluateSync (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/gensync/index.js\u001b[2m:251:28)\u001b[22m\n      \u001b[2mat sync (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/gensync/index.js\u001b[2m:89:14)\u001b[22m\n      \u001b[2mat fn (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/core/src/errors/rewrite-stack-trace.ts\u001b[2m:99:14)\u001b[22m\n      \u001b[2mat transformSync (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/core/src/transform.ts\u001b[2m:66:52)\u001b[22m\n      \u001b[2mat ScriptTransformer.transformSource (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@jest/transform/build/ScriptTransformer.js\u001b[2m:545:31)\u001b[22m\n      \u001b[2mat ScriptTransformer._transformAndBuildScript (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@jest/transform/build/ScriptTransformer.js\u001b[2m:674:40)\u001b[22m\n      \u001b[2mat ScriptTransformer.transform (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@jest/transform/build/ScriptTransformer.js\u001b[2m:726:19)\u001b[22m\n","name":"C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\libs\\zwiftmap-main\\frontend\\src\\services\\location-state\\createUrl.spec.ts","startTime":1746647738074,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1746647738074,"message":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    SyntaxError: C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\libs\\zwiftmap-main\\backend\\src\\shared\\browser\\roads\\roads\\index.spec.ts: Unexpected token, expected \",\" (27:4)\n\n    \u001b[0m \u001b[90m 25 |\u001b[39m     [\u001b[32m\"Watopia\"\u001b[39m\u001b[33m,\u001b[39m watopia]\u001b[33m,\u001b[39m\n     \u001b[90m 26 |\u001b[39m     [\u001b[32m\"Yorkshire\"\u001b[39m\u001b[33m,\u001b[39m yorkshire]\u001b[33m,\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 27 |\u001b[39m   ] \u001b[36mas\u001b[39m \u001b[36mconst\u001b[39m\n     \u001b[90m    |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 28 |\u001b[39m )\u001b[33m.\u001b[39mforEach(([name\u001b[33m,\u001b[39m roads]) \u001b[33m=>\u001b[39m {\n     \u001b[90m 29 |\u001b[39m   it(\u001b[32m`${name} has no jumps in altitudes`\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\n     \u001b[90m 30 |\u001b[39m     \u001b[36mfor\u001b[39m (\u001b[36mconst\u001b[39m edge \u001b[36mof\u001b[39m roads\u001b[33m.\u001b[39medges) {\u001b[0m\n\n      \u001b[2mat reasonCode (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parse-error.ts\u001b[2m:90:35)\u001b[22m\n      \u001b[2mat Parser.raise (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/tokenizer/index.ts\u001b[2m:1501:31)\u001b[22m\n      \u001b[2mat Parser.details [as unexpected] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/tokenizer/index.ts\u001b[2m:1534:41)\u001b[22m\n      \u001b[2mat Parser.state [as expect] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/util.ts\u001b[2m:150:46)\u001b[22m\n      \u001b[2mat Parser.optionalCommaStartLoc [as parseParenAndDistinguishExpression] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1754:9)\u001b[22m\n      \u001b[2mat Parser.canBeArrow [as parseExprAtom] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:1145:15)\u001b[22m\n      \u001b[2mat Parser.potentialArrowAt [as parseExprSubscripts] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:722:11)\u001b[22m\n      \u001b[2mat Parser.parseUpdate (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:698:7)\u001b[22m\n      \u001b[2mat Parser.parseMaybeUnary (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:660:9)\u001b[22m\n      \u001b[2mat Parser.refExpressionErrors [as parseMaybeUnaryOrPrivate] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:394:5)\u001b[22m\n      \u001b[2mat Parser.potentialArrowAt [as parseExprOps] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:409:11)\u001b[22m\n      \u001b[2mat Parser.potentialArrowAt [as parseMaybeConditional] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:364:11)\u001b[22m\n      \u001b[2mat Parser.parseMaybeAssign (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:292:54)\u001b[22m\n      \u001b[2mat Parser.refExpressionErrors (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:218:5)\u001b[22m\n      \u001b[2mat parseExpressionBase (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:209:14)\u001b[22m\n      \u001b[2mat Parser.flags [as allowInAnd] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:3127:50)\u001b[22m\n      \u001b[2mat Parser.parseExpression (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/expression.ts\u001b[2m:208:33)\u001b[22m\n      \u001b[2mat Parser.allowFunctionDeclaration [as parseStatementContent] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/statement.ts\u001b[2m:642:34)\u001b[22m\n      \u001b[2mat Parser.match [as parseStatementLike] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/statement.ts\u001b[2m:446:14)\u001b[22m\n      \u001b[2mat Parser.parseModuleItem (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/statement.ts\u001b[2m:377:27)\u001b[22m\n      \u001b[2mat Parser.parsedNonDirective [as parseBlockOrModuleBlockBody] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/statement.ts\u001b[2m:1410:9)\u001b[22m\n      \u001b[2mat Parser.parseBlockBody (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/statement.ts\u001b[2m:1385:5)\u001b[22m\n      \u001b[2mat Parser.sourceType [as parseProgram] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/statement.ts\u001b[2m:223:26)\u001b[22m\n      \u001b[2mat Parser.ExpressionParser [as parseTopLevel] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/statement.ts\u001b[2m:190:55)\u001b[22m\n      \u001b[2mat Parser.program [as parse] (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/parser/index.ts\u001b[2m:90:11)\u001b[22m\n      \u001b[2mat _unused2 (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/parser/src/index.ts\u001b[2m:87:9)\u001b[22m\n      \u001b[2mat parser (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/core/src/parser/index.ts\u001b[2m:28:19)\u001b[22m\n          at parser.next (<anonymous>)\n      \u001b[2mat normalizeFile (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/core/src/transformation/normalize-file.ts\u001b[2m:49:24)\u001b[22m\n          at normalizeFile.next (<anonymous>)\n      \u001b[2mat run (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/core/src/transformation/index.ts\u001b[2m:40:36)\u001b[22m\n          at run.next (<anonymous>)\n      \u001b[2mat transform (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/core/src/transform.ts\u001b[2m:29:20)\u001b[22m\n          at transform.next (<anonymous>)\n      \u001b[2mat evaluateSync (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/gensync/index.js\u001b[2m:251:28)\u001b[22m\n      \u001b[2mat sync (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/gensync/index.js\u001b[2m:89:14)\u001b[22m\n      \u001b[2mat fn (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/core/src/errors/rewrite-stack-trace.ts\u001b[2m:99:14)\u001b[22m\n      \u001b[2mat transformSync (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@babel/core/src/transform.ts\u001b[2m:66:52)\u001b[22m\n      \u001b[2mat ScriptTransformer.transformSource (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@jest/transform/build/ScriptTransformer.js\u001b[2m:545:31)\u001b[22m\n      \u001b[2mat ScriptTransformer._transformAndBuildScript (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@jest/transform/build/ScriptTransformer.js\u001b[2m:674:40)\u001b[22m\n      \u001b[2mat ScriptTransformer.transform (C:\\Users\\Nick\\Dropbox\\PC (2)\u001b[22m../../../../../../../../Documents/GitHub/FitFileViewer/electron-app/node_modules/@jest/transform/build/ScriptTransformer.js\u001b[2m:726:19)\u001b[22m\n","name":"C:\\Users\\Nick\\Dropbox\\PC (2)\\Documents\\GitHub\\FitFileViewer\\electron-app\\libs\\zwiftmap-main\\backend\\src\\shared\\browser\\roads\\roads\\index.spec.ts","startTime":1746647738074,"status":"failed","summary":""}],"wasInterrupted":false}
