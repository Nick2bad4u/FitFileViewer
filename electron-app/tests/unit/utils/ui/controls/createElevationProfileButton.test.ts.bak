import { describe, it, expect, vi, beforeEach, afterEach } from "vitest";

// Mock dependencies - must be before importing the module
vi.mock("../../../../../utils/charts/theming/getThemeColors.js", () => ({
  getThemeColors: vi.fn().mockReturnValue({
    primary: "#3b82f6",
    background: "#f8fafc",
    surface: "#ffffff",
    shadowLight: "rgba(0,0,0,0.1)",
    shadowMedium: "rgba(0,0,0,0.15)",
    text: "#1e293b",
    textSecondary: "#64748b",
    border: "#e2e8f0",
    borderLight: "#f1f5f9",
    primaryShadow: "rgba(59,130,246,0.25)"
  })
}));

describe("createElevationProfileButton", () => {
  let originalWindow: any;
  let openSpy: any;
  
  beforeEach(() => {
    // Store original window properties
    originalWindow = { ...window };
    
    // Mock document.createElement
    document.body.innerHTML = "";
    document.body.classList.remove("theme-dark");
    
    // Setup window.open spy
    openSpy = vi.spyOn(window, "open").mockImplementation(() => {
      // Create a mock window object with document.write and document.close
      return {
        document: {
          write: vi.fn(),
          close: vi.fn()
        }
      } as any;
    });
  });
  
  afterEach(() => {
    vi.restoreAllMocks();
    // Reset window properties
    Object.keys(window).forEach(key => {
      if (!Object.prototype.hasOwnProperty.call(originalWindow, key)) {
        delete (window as any)[key];
      }
    });
  });
  
  it("should create a button with correct properties", () => {
    // Import the module directly to ensure mocks are applied
    const { createElevationProfileButton } = require("../../../../../utils/ui/controls/createElevationProfileButton.js");
    
    // Create the button
    const button = createElevationProfileButton();
    
    // Check button properties
    expect(button).toBeInstanceOf(HTMLButtonElement);
    expect(button.className).toBe("map-action-btn");
    expect(button.title).toBe("Show Elevation Profile");
    expect(button.innerHTML).toContain("<svg class=\"icon\"");
    expect(button.innerHTML).toContain("<span>Elevation</span>");
  });
  
  it("should open a window with no files when clicked and no fit files are loaded", () => {
    // Import the module directly
    const { createElevationProfileButton } = require("../../../../../utils/ui/controls/createElevationProfileButton.js");
    
    // Create the button and click it
    const button = createElevationProfileButton();
    button.click();
    
    // Verify window.open was called with correct parameters
    expect(openSpy).toHaveBeenCalledWith("", "Elevation Profile", "width=900,height=600");
    
    // Verify document.write was called (with empty files array in HTML)
    const mockWin = openSpy.mock.results[0].value;
    expect(mockWin.document.write).toHaveBeenCalled();
    expect(mockWin.document.write.mock.calls[0][0]).toContain("const fitFiles = []");
    expect(mockWin.document.close).toHaveBeenCalled();
  });
  
  it("should handle loadedFitFiles when available", () => {
    // Import the module directly
    const { createElevationProfileButton } = require("../../../../../utils/ui/controls/createElevationProfileButton.js");
    
    // Mock window.loadedFitFiles with test data
    (window as any).loadedFitFiles = [
      {
        filePath: "test-file.fit",
        data: {
          recordMesgs: [
            { positionLat: 1, positionLong: 2, altitude: 100 },
            { positionLat: 3, positionLong: 4, altitude: 200 }
          ]
        }
      }
    ];
    
    // Create the button and click it
    const button = module.createElevationProfileButton();
    button.click();
    
    // Verify window.open was called
    expect(openSpy).toHaveBeenCalled();
    
    // Verify document.write was called with correct data
    const mockWin = openSpy.mock.results[0].value;
    expect(mockWin.document.write).toHaveBeenCalled();
    const writtenHtml = mockWin.document.write.mock.calls[0][0];
    expect(writtenHtml).toContain("test-file.fit");
    expect(writtenHtml).toContain("altitude");
  });
  
  it("should handle globalData when no loadedFitFiles available", () => {
    // Import the module directly
    const { createElevationProfileButton } = require("../../../../../utils/ui/controls/createElevationProfileButton.js");
    
    // Mock window.globalData with test data
    (window as any).globalData = {
      cachedFilePath: "global-test.fit",
      recordMesgs: [
        { positionLat: 5, positionLong: 6, altitude: 300 },
        { positionLat: 7, positionLong: 8, altitude: 400 }
      ]
    };
    
    // Create the button and click it
    const button = module.createElevationProfileButton();
    button.click();
    
    // Verify window.open was called
    expect(openSpy).toHaveBeenCalled();
    
    // Verify document.write was called with correct data
    const mockWin = openSpy.mock.results[0].value;
    expect(mockWin.document.write).toHaveBeenCalled();
    const writtenHtml = mockWin.document.write.mock.calls[0][0];
    expect(writtenHtml).toContain("global-test.fit");
  });
  
  it("should handle popup window being blocked", () => {
    // Import the module directly
    const { createElevationProfileButton } = require("../../../../../utils/ui/controls/createElevationProfileButton.js");
    
    // Make window.open return null to simulate blocked popup
    openSpy.mockReturnValueOnce(null);
    
    // Create the button and click it
    const button = module.createElevationProfileButton();
    button.click();
    
    // Verify window.open was called
    expect(openSpy).toHaveBeenCalled();
    
    // Nothing should happen (function returns early)
  });
  
  it("should adapt to dark theme", () => {
    // Import the module directly
    const { createElevationProfileButton } = require("../../../../../utils/ui/controls/createElevationProfileButton.js");
    
    // Set dark theme
    document.body.classList.add("theme-dark");
    
    // Create the button and click it
    const button = module.createElevationProfileButton();
    button.click();
    
    // Verify window.open was called
    expect(openSpy).toHaveBeenCalled();
    
    // Verify document.write was called with dark theme
    const mockWin = openSpy.mock.results[0].value;
    expect(mockWin.document.write).toHaveBeenCalled();
    const writtenHtml = mockWin.document.write.mock.calls[0][0];
    expect(writtenHtml).toContain('class="theme-dark"');
    expect(writtenHtml).toContain('const isDark = true');
  });
  
  it("should handle files without altitude data", () => {
    // Import the module directly
    const { createElevationProfileButton } = require("../../../../../utils/ui/controls/createElevationProfileButton.js");
    
    // Mock window.loadedFitFiles with a file that has no altitude data
    (window as any).loadedFitFiles = [
      {
        filePath: "no-altitude.fit",
        data: {
          recordMesgs: [] // Empty array = no altitude data
        }
      }
    ];
    
    // Create the button and click it
    const button = module.createElevationProfileButton();
    button.click();
    
    // Verify document.write was called with code for handling no data
    const mockWin = openSpy.mock.results[0].value;
    expect(mockWin.document.write).toHaveBeenCalled();
    const writtenHtml = mockWin.document.write.mock.calls[0][0];
    expect(writtenHtml).toContain("altitudes");
    expect(writtenHtml).toContain("no-altitude.fit");
  });
});