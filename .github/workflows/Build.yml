name: Build and Release Electron App

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        arch: [x64, ia32]
    defaults:
      run:
        working-directory: electron-app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Install electron-builder
        run: npm install -D electron-builder

      - name: Build Electron app
        run: |
          npx electron-builder --${{ matrix.os == 'windows-latest' && 'win' || matrix.os == 'macos-latest' && 'mac' || 'linux' }} --${{ matrix.arch }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload dist folder as artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}-${{ matrix.arch }}
          path: electron-app/dist/

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Get latest and previous tag
        id: get_tags
        run: |
          git fetch --tags
          LATEST_TAG=$(git describe --tags --abbrev=0)
          PREV_TAG=$(git tag --sort=-creatordate | sed -n 2p)
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "prev_tag=$PREV_TAG" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: release_notes
        run: |
          if [ -n "${{ steps.get_tags.outputs.prev_tag }}" ]; then
            NOTES=$(git log ${{ steps.get_tags.outputs.prev_tag }}..${{ steps.get_tags.outputs.latest_tag }} --pretty=format:'* %s (%an)')
          else
            NOTES=$(git log --pretty=format:'* %s (%an)')
          fi
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create or update release with unzipped builds
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_tags.outputs.latest_tag }}
          name: Release ${{ steps.get_tags.outputs.latest_tag }}
          body: ${{ steps.release_notes.outputs.notes }}
          files: ./artifacts/**/dist/**/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
