name: Build and Release Electron App

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  bump-version:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: electron-app
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Bump version
        id: bump
        run: |
          if [ ! -f package.json ]; then
            echo "Error: package.json not found" >&2
            exit 1
          fi
          if ! jq empty package.json >/dev/null 2>&1; then
            echo "Error: package.json is not valid JSON" >&2
            exit 1
          fi
          VERSION=$(jq -r .version package.json)
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3)
          # Only bump minor, cycling from .1 to .9 then next major
          if [ "$MINOR" -lt 9 ]; then
            NEW_MINOR=$(($MINOR + 1))
            NEW_VERSION="$MAJOR.$NEW_MINOR.$PATCH"
          else
            NEW_MAJOR=$(($MAJOR + 1))
            NEW_VERSION="$NEW_MAJOR.0.$PATCH"
          fi
          jq --arg v "$NEW_VERSION" '.version = $v' package.json > tmp.json && mv tmp.json package.json
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "::set-output name=new_version::$NEW_VERSION"

      - name: Commit and push version bump
        uses: EndBug/add-and-commit@v9
        with:
          message: "Bump version to ${{ steps.bump.outputs.new_version }}"
          add: "package.json"
          cwd: electron-app
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload bumped package.json
        uses: actions/upload-artifact@v4
        with:
          name: bumped-package-json
          path: electron-app/package.json

  build:
    needs: bump-version
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        arch: [x64, ia32]
        exclude:
          # Exclude macOS with ia32 architecture as it is not supported by Electron
          - os: macos-latest
            arch: ia32
          # Exclude Ubuntu with ia32 architecture as it is not commonly used and not officially supported
          - os: ubuntu-latest
            arch: ia32
    defaults:
      run:
        working-directory: electron-app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download bumped package.json
        uses: actions/download-artifact@v4
        with:
          name: bumped-package-json
          path: ./electron-app

      - name: Overwrite package.json with bumped version
        run: mv ./electron-app/bumped-package-json/package.json ./electron-app/package.json
        continue-on-error: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Install electron-builder
        run: npm install -D electron-builder

      - name: Build Electron app
        run: |
          npx electron-builder --${{ matrix.os == 'windows-latest' && 'win' || matrix.os == 'macos-latest' && 'mac' || 'linux' }} --${{ matrix.arch }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload distributable files as artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            electron-app/dist/*.exe
            electron-app/dist/*.dmg
            electron-app/dist/*.AppImage
            electron-app/dist/*.snap
            electron-app/dist/*.zip

  release:
    needs: [build, bump-version]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Get previous tag
        id: get_prev_tag
        run: |
          git fetch --tags
          TAG_COUNT=$(git tag --sort=-creatordate | wc -l)
          if [ "$TAG_COUNT" -ge 2 ]; then
            PREV_TAG=$(git tag --sort=-creatordate | tail -2 | head -1)
          else
            PREV_TAG=""
          fi
          echo "prev_tag=$PREV_TAG" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: release_notes
        run: |
          PREV_TAG="${{ steps.get_prev_tag.outputs.prev_tag }}"
          if [ -n "$PREV_TAG" ]; then
            NOTES=$(git log "$PREV_TAG"..HEAD --pretty=format:'* %s (%an)')
          else
            NOTES=$(git log --pretty=format:'* %s (%an)')
          fi
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: List artifacts
        run: ls -R ./artifacts

      - name: Deduplicate and validate distributable files
        run: |
          mkdir -p release-dist
          find ./artifacts -type f \( -name "*.exe" -o -name "*.dmg" -o -name "*.AppImage" -o -name "*.snap" -o -name "*.zip" \) -exec sh -c '
            for filepath; do
              filename=$(basename "$filepath")
              if [ ! -e "release-dist/$filename" ]; then
                # Validate file (e.g., check size or content if needed)
                if [ -s "$filepath" ]; then
                  cp "$filepath" "release-dist/$filename"
                else
                  echo "Skipping invalid or empty file: $filepath"
                fi
              fi
            done
          ' sh {} +

      # This step uses the softprops/action-gh-release action to create or update a GitHub release.
      # It uploads the distributable files generated during the build process and associates them with the release.
      # The release is tagged with the new version and includes release notes generated from the commit history.
      - name: Create or update release with distributable builds
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.bump-version.outputs.new_version }}
          name: Release v${{ needs.bump-version.outputs.new_version }}
          body: ${{ steps.release_notes.outputs.notes }}
          files: release-dist/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
