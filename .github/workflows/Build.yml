name: Build and Release Electron App

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  bump-version:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: electron-app
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug Step - Show git diff for electron-app
        run: |
          echo "--- GIT DIFF OUTPUT (since last tag) ---"
          LAST_REF=$(git describe --tags --match "v*" --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)
          git diff --name-status "$LAST_REF" -- electron-app/
          echo "--- END GIT DIFF OUTPUT ---"

      - name: Bump version
        id: bump
        run: |
          if [ ! -f package.json ]; then
            echo "Error: package.json not found" >&2
            exit 1
          fi
          if ! jq empty package.json >/dev/null 2>&1; then
            echo "Error: package.json is not valid JSON" >&2
            exit 1
          fi
          VERSION=$(jq -r .version package.json)
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3)
          if [ "$MINOR" -lt 9 ]; then
            NEW_VERSION="$MAJOR.$(($MINOR + 1)).0"
          else
            NEW_VERSION="$(($MAJOR + 1)).0.0"
          fi
          jq --arg v "$NEW_VERSION" '.version = $v' package.json > tmp.json && mv tmp.json package.json
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Tag new version
        if: steps.bump.outputs.new_version != ''
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag -a "v${{ steps.bump.outputs.new_version }}" -m "Release v${{ steps.bump.outputs.new_version }}"
          git push origin "v${{ steps.bump.outputs.new_version }}"
        working-directory: electron-app

      - name: Commit and push version bump
        uses: EndBug/add-and-commit@v9
        with:
          message: "Bump version to ${{ steps.bump.outputs.new_version }}"
          add: "package.json"
          cwd: electron-app
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload bumped package.json
        uses: actions/upload-artifact@v4
        with:
          name: bumped-package-json
          path: electron-app/package.json

  build:
    needs: bump-version
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        arch: [x64, ia32]
        exclude:
          # Exclude macOS with ia32 architecture as it is not supported by Electron
          - os: macos-latest
            arch: ia32
          # Exclude Ubuntu with ia32 architecture as it is not commonly used and not officially supported
          - os: ubuntu-latest
            arch: ia32
          # Exclude Windows
          - os: windows-latest
            arch: ia32
    defaults:
      run:
        working-directory: electron-app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download bumped package.json
        uses: actions/download-artifact@v4
        with:
          name: bumped-package-json
          path: ./electron-app

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Linux build dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm dpkg fakeroot xz-utils libarchive-tools pkg pkgsend flatpak flatpak-builder ruby ruby-dev build-essential zlib1g-dev
          sudo gem install --no-document fpm

      - name: Install macOS build dependencies
        if: runner.os == 'macOS'
        run: |
          brew install rpm dpkg xz gnu-tar

      - name: Install Windows build dependencies
        if: runner.os == 'Windows'
        run: |
          choco install -y 7zip.install

      - name: Cache node modules (Windows)
        if: runner.os == 'Windows'
        uses: actions/cache@v4
        with:
          path: |
            C:\Users\runneradmin\AppData\Local\npm-cache
            C:\Users\runneradmin\.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
          enableCrossOsArchive: true

      - name: Cache node modules (non-Windows)
        if: runner.os != 'Windows'
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
          enableCrossOsArchive: true

      - name: Install dependencies
        run: npm ci

      # - name: Install electron-builder
      #   run: npm install -D electron-builder

      - name: Build Electron app
        run: |
          npx electron-builder --${{ matrix.os == 'windows-latest' && 'win' || matrix.os == 'macos-latest' && 'mac' || 'linux' }} --${{ matrix.arch }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Print distributable hash (debug, Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $patterns = @('*.exe','*.dmg','*.AppImage','*.snap','*.zip','*.yml','*.blockmap','*.msi','*.deb','*.rpm','*.7z','*.pkg','*.mas','*.apk','*.p5p','*.pacman','*.freebsd','*.flatpak','*.tar.xz','*.tar.gz','*.tar.bz2')
          $files = @()
          foreach ($pattern in $patterns) {
            $files += Get-ChildItem -Path dist -Recurse -Include $pattern -ErrorAction SilentlyContinue
          }
          foreach ($file in $files | Sort-Object FullName -Unique) {
            $hash = Get-FileHash $file.FullName -Algorithm SHA512
            $bytes = for ($i = 0; $i -lt $hash.Hash.Length; $i += 2) { [Convert]::ToByte($hash.Hash.Substring($i, 2), 16) }
            $b64 = [Convert]::ToBase64String($bytes)
            Write-Host "$($file.FullName): $b64"
          }
      - name: Print distributable hash (debug, Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          find dist -type f \( -name '*.exe' -name '*.7z' -o -name '*.dmg' -o -name '*.AppImage' -o -name '*.snap' -o -name '*.zip' -o -name '*.yml' -o -name '*.blockmap' -o -name '*.msi' -o -name '*.deb' -o -name '*.rpm' -o -name '*.pkg' -o -name '*.mas' -o -name '*.apk' -o -name '*.p5p' -o -name '*.pacman' -o -name '*.freebsd' -o -name '*.flatpak' -o -name '*.tar.xz' -o -name '*.tar.gz' -o -name '*.tar.bz2' \) | sort | while read file; do
            hash=$(sha512sum "$file" | awk '{print $1}')
            b64=$(echo "$hash" | xxd -r -p | base64)
            echo "$file: $b64"
          done
      - name: Print distributable hash (debug, macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          find dist -type f \( -name '*.exe' -name '*.7z' -o -name '*.dmg' -o -name '*.AppImage' -o -name '*.snap' -o -name '*.zip' -o -name '*.yml' -o -name '*.blockmap' -o -name '*.msi' -o -name '*.deb' -o -name '*.rpm' -o -name '*.pkg' -o -name '*.mas' -o -name '*.apk' -o -name '*.p5p' -o -name '*.pacman' -o -name '*.freebsd' -o -name '*.flatpak' -o -name '*.tar.xz' -o -name '*.tar.gz' -o -name '*.tar.bz2' \) | sort | while read file; do
            hash=$(shasum -a 512 "$file" | awk '{print $1}')
            b64=$(echo "$hash" | xxd -r -p | base64)
            echo "$file: $b64"
          done

      - name: Upload distributable files as artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            electron-app/dist/Fit-File-Viewer-*
            electron-app/dist/latest*.yml
          include-hidden-files: true

  release:
    needs: [build, bump-version]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Print artifact hash (debug, Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $patterns = @('*.exe','*.dmg','*.AppImage','*.snap','*.zip','*.yml','*.blockmap','*.msi','*.deb','*.rpm','*.7z','*.pkg','*.mas','*.apk','*.p5p','*.pacman','*.freebsd','*.flatpak','*.tar.xz','*.tar.gz','*.tar.bz2')
          $files = @()
          foreach ($pattern in $patterns) {
            $files += Get-ChildItem -Path artifacts -Recurse -Include $pattern -ErrorAction SilentlyContinue
          }
          foreach ($file in $files | Sort-Object FullName -Unique) {
            $hash = Get-FileHash $file.FullName -Algorithm SHA512
            $bytes = for ($i = 0; $i -lt $hash.Hash.Length; $i += 2) { [Convert]::ToByte($hash.Hash.Substring($i, 2), 16) }
            $b64 = [Convert]::ToBase64String($bytes)
            Write-Host "$($file.FullName): $b64"
          }
      - name: Print artifact hash (debug, Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          find artifacts -type f \( -name '*.exe' -name '*.7z' -o -name '*.dmg' -o -name '*.AppImage' -o -name '*.snap' -o -name '*.zip' -o -name '*.yml' -o -name '*.blockmap' -o -name '*.msi' -o -name '*.deb' -o -name '*.rpm' -o -name '*.pkg' -o -name '*.mas' -o -name '*.apk' -o -name '*.p5p' -o -name '*.pacman' -o -name '*.freebsd' -o -name '*.flatpak' -o -name '*.tar.xz' -o -name '*.tar.gz' -o -name '*.tar.bz2' \) | sort | while read file; do
            hash=$(sha512sum "$file" | awk '{print $1}')
            b64=$(echo "$hash" | xxd -r -p | base64)
            echo "$file: $b64"
          done
      - name: Print artifact hash (debug, macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          find artifacts -type f \( -name '*.exe' -name '*.7z' -o -name '*.dmg' -o -name '*.AppImage' -o -name '*.snap' -o -name '*.zip' -o -name '*.yml' -o -name '*.blockmap' -o -name '*.msi' -o -name '*.deb' -o -name '*.rpm' -o -name '*.pkg' -o -name '*.mas' -o -name '*.apk' -o -name '*.p5p' -o -name '*.pacman' -o -name '*.freebsd' -o -name '*.flatpak' -o -name '*.tar.xz' -o -name '*.tar.gz' -o -name '*.tar.bz2' \) | sort | while read file; do
            hash=$(shasum -a 512 "$file" | awk '{print $1}')
            b64=$(echo "$hash" | xxd -r -p | base64)
            echo "$file: $b64"
          done

      - name: Get previous tag
        id: get_prev_tag
        run: |
          git fetch --tags
          TAG_COUNT=$(git tag --sort=-creatordate | wc -l)
          if [ "$TAG_COUNT" -ge 2 ]; then
            PREV_TAG=$(git tag --sort=-creatordate | tail -2 | head -1)
          else
            PREV_TAG=""
          fi
          echo "prev_tag=$PREV_TAG" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: release_notes
        run: |
          PREV_TAG="${{ steps.get_prev_tag.outputs.prev_tag }}"
          if [ -n "$PREV_TAG" ]; then
            NOTES=$(git log "$PREV_TAG"..HEAD --pretty=format:'- %s%n  - Author: %an <%ae>%n  - Commit: [`%h`](https://github.com/${{ github.repository }}/commit/%H)%n  - Date: %ad%n' --date=short)
          else
            NOTES=$(git log --pretty=format:'- %s%n  - Author: %an <%ae>%n  - Commit: [`%h`](https://github.com/${{ github.repository }}/commit/%H)%n  - Date: %ad%n' --date=short)
          fi
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo -e "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: List artifacts
        run: ls -R ./artifacts

      - name: Organize distributables by platform and arch
        run: |
          mkdir -p release-dist
          for artifact_dir in ./artifacts/dist-*; do
            [ -d "$artifact_dir" ] || continue
            artifact_name=$(basename "$artifact_dir")
            platform_arch=${artifact_name#dist-}
            mkdir -p "release-dist/$platform_arch"
            cp -v $artifact_dir/Fit-File-Viewer-* $artifact_dir/*.yml "release-dist/$platform_arch/" 2>/dev/null || true
          done

      - name: Fix all sha512 in latest*.yml files
        shell: bash
        run: |
          set -e
          for yml in $(find release-dist -type f -name 'latest*.yml'); do
            echo "Processing $yml"
            dir=$(dirname "$yml")
            tmp_file="${yml}.tmp"
            first_file_sha512=""
            first_file_path=""
            in_files_section=0
            current_url=""
            file_count=0
            updated_count=0
            missing_count=0
            while IFS= read -r line; do
              if [[ $line =~ ^[[:space:]]*files: ]]; then
                in_files_section=1
                echo "$line" >> "$tmp_file"
                continue
              fi
              if [[ $in_files_section -eq 1 ]]; then
                if [[ $line =~ ^[[:space:]]*-[[:space:]]url:[[:space:]](.*) ]]; then
                  current_url="${BASH_REMATCH[1]}"
                  echo "  - url: $current_url" >> "$tmp_file"
                  file_count=$((file_count+1))
                elif [[ $line =~ ^[[:space:]]*sha512:[[:space:]].* && -n $current_url ]]; then
                  file_path="$dir/$current_url"
                  if [ -f "$file_path" ]; then
                    hash=$(sha512sum "$file_path" | awk '{print $1}')
                    b64=$(echo "$hash" | xxd -r -p | base64 | tr -d '\n')
                    echo "    sha512: $b64" >> "$tmp_file"
                    if [[ -z "$first_file_sha512" ]]; then
                      first_file_sha512="$b64"
                      first_file_path="$current_url"
                    fi
                    updated_count=$((updated_count+1))
                  else
                    echo "    sha512: " >> "$tmp_file"
                    missing_count=$((missing_count+1))
                  fi
                  current_url=""
                elif [[ $line =~ ^[[:space:]]*size:[[:space:]].* ]]; then
                  trimmed=$(echo "$line" | sed 's/^[[:space:]]*//')
                  echo "    $trimmed" >> "$tmp_file"
                elif [[ $line =~ ^[[:space:]]*path:[[:space:]].* || $line =~ ^[[:space:]]*sha512:[[:space:]].* || $line =~ ^[[:space:]]*releaseDate:[[:space:]].* ]]; then
                  in_files_section=0
                  echo "$line" >> "$tmp_file"
                else
                  echo "$line" >> "$tmp_file"
                fi
              else
                if [[ $line =~ ^path:[[:space:]] ]]; then
                  if [[ -n "$first_file_path" ]]; then
                    echo "path: $first_file_path" >> "$tmp_file"
                  else
                    echo "$line" >> "$tmp_file"
                  fi
                elif [[ $line =~ ^sha512:[[:space:]] ]]; then
                  if [[ -n "$first_file_sha512" ]]; then
                    echo "sha512: $first_file_sha512" >> "$tmp_file"
                  else
                    echo "$line" >> "$tmp_file"
                  fi
                else
                  echo "$line" >> "$tmp_file"
                fi
              fi
            done < "$yml"
            echo "[DEBUG] Summary for $yml: $file_count files, $updated_count updated, $missing_count missing"
            mv "$tmp_file" "$yml"
            echo "Updated $yml"
          done

      - name: Print artifact hash (debug, Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $patterns = @('*.exe','*.dmg','*.AppImage','*.snap','*.zip','*.yml','*.blockmap','*.msi','*.deb','*.rpm','*.7z','*.pkg','*.mas','*.apk','*.p5p','*.pacman','*.freebsd','*.flatpak','*.tar.xz','*.tar.gz','*.tar.bz2')
          $files = @()
          foreach ($pattern in $patterns) {
            $files += Get-ChildItem -Path artifacts -Recurse -Include $pattern -ErrorAction SilentlyContinue
          }
          foreach ($file in $files | Sort-Object FullName -Unique) {
            $hash = Get-FileHash $file.FullName -Algorithm SHA512
            $bytes = for ($i = 0; $i -lt $hash.Hash.Length; $i += 2) { [Convert]::ToByte($hash.Hash.Substring($i, 2), 16) }
            $b64 = [Convert]::ToBase64String($bytes)
            Write-Host "$($file.FullName): $b64"
          }
      - name: Print artifact hash (debug, Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          find artifacts -type f \( -name '*.exe' -name '*.7z' -o -name '*.dmg' -o -name '*.AppImage' -o -name '*.snap' -o -name '*.zip' -o -name '*.yml' -o -name '*.blockmap' -o -name '*.msi' -o -name '*.deb' -o -name '*.rpm' -o -name '*.pkg' -o -name '*.mas' -o -name '*.apk' -o -name '*.p5p' -o -name '*.pacman' -o -name '*.freebsd' -o -name '*.flatpak' -o -name '*.tar.xz' -o -name '*.tar.gz' -o -name '*.tar.bz2' \) | sort | while read file; do
            hash=$(sha512sum "$file" | awk '{print $1}')
            b64=$(echo "$hash" | xxd -r -p | base64)
            echo "$file: $b64"
          done
      - name: Print artifact hash (debug, macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          find artifacts -type f \( -name '*.exe' -name '*.7z' -o -name '*.dmg' -o -name '*.AppImage' -o -name '*.snap' -o -name '*.zip' -o -name '*.yml' -o -name '*.blockmap' -o -name '*.msi' -o -name '*.deb' -o -name '*.rpm' -o -name '*.pkg' -o -name '*.mas' -o -name '*.apk' -o -name '*.p5p' -o -name '*.pacman' -o -name '*.freebsd' -o -name '*.flatpak' -o -name '*.tar.xz' -o -name '*.tar.gz' -o -name '*.tar.bz2' \) | sort | while read file; do
            hash=$(shasum -a 512 "$file" | awk '{print $1}')
            b64=$(echo "$hash" | xxd -r -p | base64)
            echo "$file: $b64"
          done

      - name: Create or update release with distributable builds
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.bump-version.outputs.new_version }}
          name: FitFileViewer v${{ needs.bump-version.outputs.new_version }}
          body: ${{ steps.release_notes.outputs.notes }}
          files: release-dist/**/*
          draft: false
          prerelease: false
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
